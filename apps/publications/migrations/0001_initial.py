# Generated by Django 4.2.7 on 2025-10-01 15:39

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('labs', '0005_alter_publication_table'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('google_scholar_id', models.CharField(blank=True, max_length=100)),
                ('orcid', models.CharField(blank=True, max_length=50, unique=True)),
                ('dblp_id', models.CharField(blank=True, max_length=255)),
                ('current_affiliation', models.CharField(blank=True, max_length=255)),
                ('current_position', models.CharField(blank=True, max_length=100)),
                ('total_citations', models.PositiveIntegerField(default=0)),
                ('h_index', models.PositiveIntegerField(default=0)),
                ('i10_index', models.PositiveIntegerField(default=0)),
                ('bio', models.TextField(blank=True)),
                ('profile_image_url', models.URLField(blank=True)),
                ('personal_website', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'authors',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('abstract', models.TextField(blank=True)),
                ('publication_year', models.PositiveIntegerField()),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('doi', models.CharField(blank=True, max_length=255, unique=True)),
                ('arxiv_id', models.CharField(blank=True, max_length=50)),
                ('google_scholar_id', models.CharField(blank=True, max_length=100)),
                ('citation_count', models.PositiveIntegerField(default=0)),
                ('h_index_contribution', models.FloatField(default=0.0)),
                ('paper_url', models.URLField(blank=True)),
                ('code_url', models.URLField(blank=True)),
                ('dataset_url', models.URLField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('slides_url', models.URLField(blank=True)),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('language', models.CharField(default='en', max_length=10)),
                ('is_open_access', models.BooleanField(default=False)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='논문 키워드 목록', size=None)),
                ('additional_notes', models.TextField(blank=True, help_text='추가 설명 (예: Best Paper Award, 특별한 성과 등)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'publications',
                'ordering': ['-publication_year', '-citation_count'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('short_name', models.CharField(blank=True, max_length=50)),
                ('type', models.CharField(choices=[('conference', 'Conference'), ('journal', 'Journal'), ('workshop', 'Workshop'), ('preprint', 'Preprint')], max_length=20)),
                ('tier', models.CharField(choices=[('top', 'Top Tier'), ('good', 'Good'), ('regular', 'Regular'), ('unknown', 'Unknown')], default='unknown', max_length=10)),
                ('core_ranking', models.CharField(blank=True, choices=[('A*', 'A*'), ('A', 'A'), ('B', 'B'), ('C', 'C')], max_length=2)),
                ('h5_index', models.PositiveIntegerField(blank=True, null=True)),
                ('h5_median', models.PositiveIntegerField(blank=True, null=True)),
                ('impact_factor', models.FloatField(blank=True, null=True)),
                ('field', models.CharField(blank=True, max_length=100)),
                ('subfield', models.CharField(blank=True, max_length=100)),
                ('website_url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'venues',
                'ordering': ['-tier', 'name'],
                'unique_together': {('name', 'type')},
            },
        ),
        migrations.CreateModel(
            name='ResearchArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(default='#3498db', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='publications.researcharea')),
            ],
            options={
                'db_table': 'research_areas',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PublicationVenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presentation_type', models.CharField(choices=[('oral', 'Oral Presentation'), ('poster', 'Poster'), ('spotlight', 'Spotlight'), ('workshop', 'Workshop'), ('demo', 'Demo')], default='poster', max_length=20)),
                ('session_name', models.CharField(blank=True, max_length=255)),
                ('is_best_paper', models.BooleanField(default=False)),
                ('is_best_student_paper', models.BooleanField(default=False)),
                ('is_outstanding_paper', models.BooleanField(default=False)),
                ('award_name', models.CharField(blank=True, max_length=255)),
                ('page_start', models.PositiveIntegerField(blank=True, null=True)),
                ('page_end', models.PositiveIntegerField(blank=True, null=True)),
                ('volume', models.CharField(blank=True, max_length=50)),
                ('issue', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.publication')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.venue')),
            ],
            options={
                'db_table': 'publication_venues',
            },
        ),
        migrations.CreateModel(
            name='PublicationResearchArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relevance_score', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.publication')),
                ('research_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.researcharea')),
            ],
            options={
                'db_table': 'publication_research_areas',
            },
        ),
        migrations.CreateModel(
            name='PublicationAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_order', models.PositiveIntegerField()),
                ('is_corresponding', models.BooleanField(default=False)),
                ('is_first_author', models.BooleanField(default=False)),
                ('is_last_author', models.BooleanField(default=False)),
                ('affiliation', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('affiliation_lab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='labs.lab')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.author')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='publications.publication')),
            ],
            options={
                'db_table': 'publication_authors',
                'ordering': ['author_order'],
            },
        ),
        migrations.AddField(
            model_name='publication',
            name='authors',
            field=models.ManyToManyField(related_name='publications', through='publications.PublicationAuthor', to='publications.author'),
        ),
        migrations.AddField(
            model_name='publication',
            name='labs',
            field=models.ManyToManyField(blank=True, related_name='publications', to='labs.lab'),
        ),
        migrations.AddField(
            model_name='publication',
            name='research_areas',
            field=models.ManyToManyField(related_name='publications', through='publications.PublicationResearchArea', to='publications.researcharea'),
        ),
        migrations.AddField(
            model_name='publication',
            name='venues',
            field=models.ManyToManyField(related_name='publications', through='publications.PublicationVenue', to='publications.venue'),
        ),
        migrations.CreateModel(
            name='LabPublicationStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_publications', models.PositiveIntegerField(default=0)),
                ('total_citations', models.PositiveIntegerField(default=0)),
                ('h_index', models.PositiveIntegerField(default=0)),
                ('top_tier_count', models.PositiveIntegerField(default=0)),
                ('avg_citations_per_paper', models.FloatField(default=0.0)),
                ('publications_last_5_years', models.PositiveIntegerField(default=0)),
                ('best_venue_tier', models.CharField(blank=True, max_length=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('lab', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='publication_stats', to='labs.lab')),
                ('most_cited_paper_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='publications.publication')),
            ],
            options={
                'db_table': 'lab_publication_stats',
            },
        ),
        migrations.CreateModel(
            name='Collaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collaborator_type', models.CharField(choices=[('lab', 'Lab'), ('institution', 'Institution'), ('company', 'Company')], max_length=20)),
                ('collaborator_name', models.CharField(max_length=255)),
                ('collaborator_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('collaboration_count', models.PositiveIntegerField(default=1)),
                ('first_collaboration_year', models.PositiveIntegerField(blank=True, null=True)),
                ('last_collaboration_year', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collaborations', to='labs.lab')),
            ],
            options={
                'db_table': 'collaborations',
                'ordering': ['-collaboration_count'],
            },
        ),
        migrations.CreateModel(
            name='CitationMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_count', models.PositiveIntegerField()),
                ('yearly_citations', models.JSONField(default=dict)),
                ('source', models.CharField(choices=[('google_scholar', 'Google Scholar'), ('semantic_scholar', 'Semantic Scholar'), ('crossref', 'CrossRef'), ('manual', 'Manual')], max_length=20)),
                ('influential_citation_count', models.PositiveIntegerField(default=0)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='citation_metrics', to='publications.publication')),
            ],
            options={
                'db_table': 'citation_metrics',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['name'], name='authors_name_e12c66_idx'),
        ),
        migrations.AddIndex(
            model_name='author',
            index=models.Index(fields=['google_scholar_id'], name='authors_google__32992a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='publicationvenue',
            unique_together={('publication', 'venue')},
        ),
        migrations.AlterUniqueTogether(
            name='publicationresearcharea',
            unique_together={('publication', 'research_area')},
        ),
        migrations.AddIndex(
            model_name='publicationauthor',
            index=models.Index(fields=['is_corresponding'], name='publication_is_corr_b221ec_idx'),
        ),
        migrations.AddIndex(
            model_name='publicationauthor',
            index=models.Index(fields=['affiliation_lab'], name='publication_affilia_a303c4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='publicationauthor',
            unique_together={('publication', 'author_order')},
        ),
        migrations.AddIndex(
            model_name='publication',
            index=models.Index(fields=['publication_year'], name='publication_publica_4dd08d_idx'),
        ),
        migrations.AddIndex(
            model_name='publication',
            index=models.Index(fields=['citation_count'], name='publication_citatio_d583ca_idx'),
        ),
        migrations.AddIndex(
            model_name='publication',
            index=models.Index(fields=['doi'], name='publication_doi_60ac3a_idx'),
        ),
        migrations.AddIndex(
            model_name='collaboration',
            index=models.Index(fields=['lab', 'collaborator_type'], name='collaborati_lab_id_5f6d9f_idx'),
        ),
        migrations.AddIndex(
            model_name='citationmetric',
            index=models.Index(fields=['recorded_at'], name='citation_me_recorde_f84864_idx'),
        ),
    ]
